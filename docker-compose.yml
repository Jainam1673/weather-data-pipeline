# Advanced Weather Data Pipeline v2.0 - Production Docker Compose
# =================================================================
# Implements latest Docker Compose best practices:
# - Health checks and dependency management
# - Resource limits and security
# - Persistent volumes and proper networking
# - Environment-specific configurations
# - Monitoring and logging integration

services:
  # ===========================
  # API Server
  # ===========================
  weather-api:
    build:
      context: .
      target: api-server
      platforms:
        - linux/amd64
        - linux/arm64
      cache_from:
        - ghcr.io/astral-sh/uv:python3.11-bookworm-slim
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: weather-api
    hostname: weather-api
    
    # Port mapping
    ports:
      - "8000:8000"
    
    # Environment variables
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - PYTHONPATH=/app
      - UV_CACHE_DIR=/opt/uv-cache
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /opt/uv-cache:noexec,nosuid,size=200m
    
    # Volume mounts
    volumes:
      - weather-data:/app/data:rw
      - weather-logs:/app/logs:rw
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - weather-network
    
    # Labels for better management
    labels:
      com.weather-pipeline.service: "api"
      com.weather-pipeline.version: "2.0.0"
      com.weather-pipeline.component: "backend"

  # ===========================
  # Dashboard Service
  # ===========================
  weather-dashboard:
    build:
      context: .
      target: dashboard
      platforms:
        - linux/amd64
        - linux/arm64
      cache_from:
        - ghcr.io/astral-sh/uv:python3.11-bookworm-slim
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: weather-dashboard
    hostname: weather-dashboard
    
    # Port mapping
    ports:
      - "8501:8501"
    
    # Environment variables
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
      - STREAMLIT_SERVER_FILE_WATCHER_TYPE=none
      - API_BASE_URL=http://weather-api:8000
      - PYTHONPATH=/app
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Dependencies
    depends_on:
      weather-api:
        condition: service_healthy
    
    # Volume mounts
    volumes:
      - weather-logs:/app/logs:rw
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - weather-network
    
    # Labels
    labels:
      com.weather-pipeline.service: "dashboard"
      com.weather-pipeline.version: "2.0.0"
      com.weather-pipeline.component: "frontend"

  # ===========================
  # Data Processor Service
  # ===========================
  weather-processor:
    build:
      context: .
      target: production
      platforms:
        - linux/amd64
        - linux/arm64
    container_name: weather-processor
    hostname: weather-processor
    
    # No ports exposed (internal service)
    
    # Environment variables
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - PROCESSOR_INTERVAL=300  # 5 minutes
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    
    # Security configuration
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Volume mounts
    volumes:
      - weather-data:/app/data:rw
      - weather-logs:/app/logs:rw
    
    # Command override for processing
    command: ["python", "main.py", "processor"]
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network
    networks:
      - weather-network
    
    # Labels
    labels:
      com.weather-pipeline.service: "processor"
      com.weather-pipeline.version: "2.0.0"
      com.weather-pipeline.component: "backend"

# ===========================
# Volumes
# ===========================
volumes:
  weather-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data
    labels:
      com.weather-pipeline.volume: "data"
      com.weather-pipeline.backup: "required"
  
  weather-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
    labels:
      com.weather-pipeline.volume: "logs"
      com.weather-pipeline.backup: "optional"

# ===========================
# Networks
# ===========================
networks:
  weather-network:
    driver: bridge
    name: weather-pipeline-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    labels:
      com.weather-pipeline.network: "main"
      com.weather-pipeline.version: "2.0.0"

# ===========================
# Secrets (for production)
# ===========================
secrets:
  api_key:
    file: ./secrets/api_key.txt
  db_password:
    file: ./secrets/db_password.txt

# ===========================
# Configs
# ===========================
configs:
  app_config:
    file: ./config/app.yml
  logging_config:
    file: ./config/logging.yml
