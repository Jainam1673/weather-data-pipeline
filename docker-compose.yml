# Advanced Weather Data Pipeline v2.0 - Docker Compose Configuration
# ====================================================================

version: '3.8'

services:
  # API Server
  weather-api:
    build:
      context: .
      target: api-server
    container_name: weather-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./src/data:/app/src/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - weather-network

  # Dashboard
  weather-dashboard:
    build:
      context: .
      target: dashboard
    container_name: weather-dashboard
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - API_BASE_URL=http://weather-api:8000
    depends_on:
      weather-api:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - weather-network

  # Database Volume Service (for persistence)
  weather-data:
    image: alpine:latest
    container_name: weather-data-volume
    volumes:
      - weather-db-data:/data
    command: "true"

volumes:
  weather-db-data:
    driver: local

networks:
  weather-network:
    driver: bridge
    name: weather-pipeline-network

# Development override file: docker-compose.override.yml
# Use: docker-compose up for development with volume mounts
