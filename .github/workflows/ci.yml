name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pixi
      uses: prefix-dev/setup-pixi@v0.4.1
      with:
        pixi-version: latest
        cache: true
    
    - name: Install dependencies
      run: pixi install
    
    - name: Check Mojo availability
      run: pixi run mojo --version
    
    - name: Run Python syntax check
      run: |
        pixi run python -m py_compile api.py
        pixi run python -m py_compile database.py
        pixi run python -m py_compile streamlit_app.py
        pixi run python -m py_compile test_api.py
    
    - name: Run database initialization
      run: pixi run python -c "from database import WeatherDatabase; db = WeatherDatabase(); print('Database initialized successfully')"
    
    - name: Test API endpoints
      run: |
        # Start API in background
        pixi run python api.py &
        API_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test OpenMeteo endpoints
        curl -f http://localhost:8000/openmeteo/current/51.5074/-0.1278 || exit 1
        
        # Stop API
        kill $API_PID
    
    - name: Test data generation
      run: |
        pixi run python -c "
        import requests
        import time
        import subprocess
        import signal
        import os
        
        # Start API
        proc = subprocess.Popen(['pixi', 'run', 'python', 'api.py'])
        time.sleep(10)
        
        try:
            # Test data generation
            response = requests.post('http://localhost:8000/generate-data', 
                                   json={'num_points': 5, 'latitude': 51.5074, 'longitude': -0.1278})
            if response.status_code == 200:
                print('✅ Data generation test passed')
            else:
                print('❌ Data generation test failed')
                exit(1)
        finally:
            proc.terminate()
            proc.wait()
        "
    
    - name: Lint Python code
      run: |
        pixi run python -m pip install flake8
        pixi run flake8 --max-line-length=120 --ignore=E501,W503 *.py

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pixi
      uses: prefix-dev/setup-pixi@v0.4.1
      with:
        pixi-version: latest
        cache: true
    
    - name: Install dependencies
      run: pixi install
    
    - name: Security scan with bandit
      run: |
        pixi run python -m pip install bandit[toml]
        pixi run bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation
      run: |
        # Check if key documentation files exist
        test -f README.md || (echo "README.md missing" && exit 1)
        test -f LICENSE || (echo "LICENSE missing" && exit 1)
        test -f CONTRIBUTING.md || (echo "CONTRIBUTING.md missing" && exit 1)
        test -f SECURITY.md || (echo "SECURITY.md missing" && exit 1)
        
        # Check README content
        grep -q "Mojo Weather Data Pipeline" README.md || (echo "README title missing" && exit 1)
        grep -q "Quick Start" README.md || (echo "Quick Start section missing" && exit 1)
        
        echo "✅ Documentation check passed"

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pixi
      uses: prefix-dev/setup-pixi@v0.4.1
      with:
        pixi-version: latest
        cache: true
    
    - name: Install dependencies
      run: pixi install
    
    - name: Performance benchmark
      run: |
        pixi run python -c "
        import time
        import subprocess
        import requests
        
        # Start API
        proc = subprocess.Popen(['pixi', 'run', 'python', 'api.py'])
        time.sleep(10)
        
        try:
            # Benchmark API response time
            start_time = time.time()
            response = requests.get('http://localhost:8000/health')
            end_time = time.time()
            
            response_time = end_time - start_time
            print(f'API response time: {response_time:.3f}s')
            
            if response_time > 5.0:
                print('❌ API response too slow')
                exit(1)
            else:
                print('✅ Performance benchmark passed')
                
        finally:
            proc.terminate()
            proc.wait()
        "

  integration:
    runs-on: ubuntu-latest
    needs: [test, security, documentation]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pixi
      uses: prefix-dev/setup-pixi@v0.4.1
      with:
        pixi-version: latest
        cache: true
    
    - name: Full pipeline test
      run: |
        pixi install
        chmod +x test_pipeline.sh
        ./test_pipeline.sh
    
    - name: Generate deployment artifact
      if: github.ref == 'refs/heads/main'
      run: |
        tar -czf mojo-weather-pipeline-${{ github.sha }}.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.log' \
          --exclude='*.db' \
          --exclude='.pixi' \
          .
    
    - name: Upload deployment artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: mojo-weather-pipeline-${{ github.sha }}.tar.gz
