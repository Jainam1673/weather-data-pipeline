# Production Docker Compose Configuration
# =======================================
# Usage: docker-compose -f docker-compose.prod.yml up -d
# 
# Production-ready configuration with:
# - Resource limits and security hardening
# - Health checks and monitoring
# - Proper secrets management
# - Load balancing and scaling support

services:
  # ===========================
  # Load Balancer (Nginx)
  # ===========================
  nginx:
    image: nginx:1.25-alpine
    container_name: weather-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - weather-api
      - weather-dashboard
    networks:
      - weather-network
    restart: unless-stopped
    labels:
      com.weather-pipeline.service: "proxy"
      com.weather-pipeline.component: "infrastructure"

  # ===========================
  # API Server (Scaled)
  # ===========================
  weather-api:
    build:
      context: .
      target: production
      platforms:
        - linux/amd64
        - linux/arm64
    
    # Scale configuration
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
    
    # Environment
    environment:
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=4
      - MAX_REQUESTS=1000
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Volumes
    volumes:
      - weather-data:/app/data:rw
      - weather-logs:/app/logs:rw
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Network
    networks:
      - weather-network
    
    # Secrets
    secrets:
      - api_key
      - db_password
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "com.weather-pipeline.service,com.weather-pipeline.component"

  # ===========================
  # Dashboard
  # ===========================
  weather-dashboard:
    build:
      context: .
      target: dashboard
      platforms:
        - linux/amd64
        - linux/arm64
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Environment
    environment:
      - ENVIRONMENT=production
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - API_BASE_URL=http://weather-api:8000
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Volumes
    volumes:
      - weather-logs:/app/logs:rw
    
    # Dependencies
    depends_on:
      weather-api:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Network
    networks:
      - weather-network
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # ===========================
  # Data Processor
  # ===========================
  weather-processor:
    build:
      context: .
      target: production
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Environment
    environment:
      - ENVIRONMENT=production
      - PROCESSOR_INTERVAL=300
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Volumes
    volumes:
      - weather-data:/app/data:rw
      - weather-logs:/app/logs:rw
    
    # Command
    command: ["python", "main.py", "processor"]
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 3
    
    # Network
    networks:
      - weather-network
    
    # Secrets
    secrets:
      - api_key

  # ===========================
  # Monitoring & Observability
  # ===========================
  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: weather-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - weather-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: weather-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - weather-network
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: weather-loki
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - weather-network
    restart: unless-stopped

# ===========================
# Volumes
# ===========================
volumes:
  weather-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/weather-pipeline/data
    labels:
      com.weather-pipeline.backup: "daily"
  
  weather-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/weather-pipeline/logs
  
  prometheus-data:
    driver: local
    
  grafana-data:
    driver: local
    
  loki-data:
    driver: local

# ===========================
# Networks
# ===========================
networks:
  weather-network:
    driver: bridge
    name: weather-pipeline-prod
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

# ===========================
# Secrets
# ===========================
secrets:
  api_key:
    external: true
    name: weather_api_key_v1
  
  db_password:
    external: true
    name: weather_db_password_v1

# ===========================
# Configs
# ===========================
configs:
  nginx_config:
    external: true
    name: nginx_config_v1
  
  app_config:
    external: true
    name: app_config_v1
